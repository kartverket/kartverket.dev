import Typography from '@mui/material/Typography';

import { Vulnerability } from '../../../typesFrontend';
import { Link } from '@backstage/core-components';
import { ErrorBanner } from '../../ErrorBanner';
import { IdsWithUrls } from './IdsWithUrls';

interface SysdigContentProps {
  vulnerability: Vulnerability;
}

export const SysdigContent = ({ vulnerability }: SysdigContentProps) => {
  const info = vulnerability.scannerSpecificInfo.sysdigInfo;
  if (!info) {
    return <ErrorBanner />;
  }

  const link = new URL(info.htmlUrl).href;

  const clusterToNamespaces = info.locations.reduce<
    Record<string, Set<string>>
  >((acc, location) => {
    if (!acc[location.cluster]) acc[location.cluster] = new Set();
    if (location.namespace) acc[location.cluster]!.add(location.namespace);
    return acc;
  }, {});

  return (
    <Typography>
      <IdsWithUrls vulnerabilityIdInfo={vulnerability.vulnerabilityIdInfo} />
      <br />
      <strong>Sysdig-link: </strong>
      <Link to={link}>
        {link.length > 80 ? link.slice(0, 30).concat('...') : link}
      </Link>
      <br />
      <strong>Is exploitable: </strong>
      {info.isExploitable ? 'Yes' : 'No'}
      <br />
      <strong>Packages: </strong>
      {info.packages.join(', ')}
      <br />
      <strong>Containers: </strong>
      {info.containerNames.join(', ')}
      <br />
      <strong>Locations: </strong>
      {Object.entries(clusterToNamespaces).map(([cluster, nsSet]) => (
        <Typography key={cluster}>
          {cluster}: {Array.from(nsSet).join(', ')}
        </Typography>
      ))}
    </Typography>
  );
};
