import { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';
import Typography from '@mui/material/Typography';
import { styled } from '@mui/system';
import { formatDate } from 'date-fns';
import { useState } from 'react';
import { Vulnerability } from '../../typesFrontend';
import { ScannerTag } from './ScannerTag';
import { SeverityTag } from './SeverityTag';
import TableCell from '@mui/material/TableCell';
import Stack from '@mui/material/Stack';
import IconButton from '@mui/material/IconButton';
import TableRow, { tableRowClasses } from '@mui/material/TableRow';
import Button from '@mui/material/Button';
import { TableRowCollapse } from './TableRowCollapse';
import { AcceptDialog } from './AcceptRisk/AcceptDialog';

const StyledTableRow = styled(TableRow)<{ accepted?: boolean }>(
  ({ theme, accepted }) => ({
    [`&.${tableRowClasses.root}:nth-of-type(even)`]: {
      borderBottom: `1px solid ${theme.palette.divider}`,
    },
    [`&.${tableRowClasses.root}`]: {
      backgroundColor: theme.palette.background.paper,
    },
    ...(accepted && {
      opacity: 0.3,
    }),
  }),
);

const AcceptButton = styled(Button)(({ theme }) => ({
  textTransform: 'none',
  fontSize: 13,
  padding: '2px 10px',
  borderRadius: 16,
  borderColor: '#cfcfcf',
  color: theme.palette.text.primary,
  '&:hover': {
    backgroundColor: '#cfcfcf',
    borderColor: '#cfcfcf',
  },
}));

type Props = {
  vulnerability: Vulnerability;
  componentName: string;
};

export const VulnerabilityTableRow = ({
  vulnerability,
  componentName,
}: Props) => {
  const [open, setOpen] = useState(false);
  const [openAcceptDialog, setOpenAcceptDialog] = useState(false);
  const [comment, setComment] = useState('');
  const [acceptedBy, setAcceptedBy] = useState('');

  const singleId = Array.isArray(vulnerability.vulnerabilityId)
    ? vulnerability.vulnerabilityId.join(',')
    : vulnerability.vulnerabilityId;

  const handleOpenAcceptDialog = () => {
    setOpenAcceptDialog(true);
  };

  const handleCloseAcceptDialog = () => {
    setOpenAcceptDialog(false);
  };

  return (
    <>
      <StyledTableRow accepted={!!vulnerability.acceptedAt}>
        <TableCell>
          <Typography>{singleId.toUpperCase()}</Typography>
        </TableCell>

        <TableCell>
          <Typography>{vulnerability.summary}</Typography>
        </TableCell>

        <TableCell>
          <Typography>
            {vulnerability.dateFirstSeen
              ? formatDate(vulnerability.dateFirstSeen, 'dd.MM.yyyy')
              : 'â€“'}
          </Typography>
        </TableCell>

        <TableCell>
          <Stack gap={1}>
            {vulnerability.scanners.map(s => (
              <ScannerTag key={s} scanner={s} />
            ))}
          </Stack>
        </TableCell>

        <TableCell>
          <SeverityTag severity={vulnerability.severity} />
        </TableCell>

        <TableCell>
          {vulnerability.acceptedAt ? (
            <Typography fontSize={14}>Akseptert</Typography>
          ) : (
            <AcceptButton
              variant="outlined"
              size="small"
              onClick={handleOpenAcceptDialog}
            >
              Aksepter risiko
            </AcceptButton>
          )}
          <AcceptDialog
            componentName={componentName}
            vulnerability={vulnerability}
            openAcceptDialog={openAcceptDialog}
            handleCloseAcceptDialog={handleCloseAcceptDialog}
            acceptedBy={acceptedBy}
            comment={comment}
            setAcceptedBy={setAcceptedBy}
            setComment={setComment}
          />
        </TableCell>

        <TableCell align="right" sx={{ px: 4 }}>
          <IconButton size="medium" onClick={() => setOpen(!open)}>
            {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}
          </IconButton>
        </TableCell>
      </StyledTableRow>

      <StyledTableRow>
        <TableCell sx={{ p: 0 }} colSpan={7}>
          <TableRowCollapse vulnerability={vulnerability} open={open} />
        </TableCell>
      </StyledTableRow>
    </>
  );
};
