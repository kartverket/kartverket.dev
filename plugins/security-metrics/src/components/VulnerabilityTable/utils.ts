import { Severity, Vulnerability } from '../../typesFrontend';

const severityOrder: Record<Severity, number> = {
  ['critical']: 1,
  ['high']: 2,
  ['medium']: 3,
  ['low']: 4,
  ['negligible']: 5,
  ['unknown']: 6,
};

export const sortableHeaders = [
  'Dato',
  'Skannere',
  'Alvorlighetsgrad',
  'Status',
] as const;
export type SortableHeader = (typeof sortableHeaders)[number];

export const sortVulnerabilities = (
  a: Vulnerability,
  b: Vulnerability,
  sortType: SortableHeader,
  order: 'asc' | 'desc',
) => {
  switch (sortType) {
    case 'Dato': {
      const missing = order === 'asc' ? -Infinity : Infinity;
      const tA = a.dateFirstSeen
        ? new Date(a.dateFirstSeen).getTime()
        : missing;
      const tB = b.dateFirstSeen
        ? new Date(b.dateFirstSeen).getTime()
        : missing;
      return order === 'asc' ? tA - tB : tB - tA;
    }
    case 'Skannere':
      return order === 'asc'
        ? a.scanners[0].localeCompare(b.scanners[0])
        : b.scanners[0].localeCompare(a.scanners[0]);
    case 'Alvorlighetsgrad':
      return order === 'asc'
        ? severityOrder[b.severity] - severityOrder[a.severity]
        : severityOrder[a.severity] - severityOrder[b.severity];
    case 'Status': {
      const aAccepted = a.acceptedAt ? 1 : 0;
      const bAccepted = b.acceptedAt ? 1 : 0;
      if (aAccepted !== bAccepted) {
        return order === 'asc' ? aAccepted - bAccepted : bAccepted - aAccepted;
      }
      const sev = severityOrder[a.severity] - severityOrder[b.severity];
      if (sev) return order === 'asc' ? sev : -sev;
      const tA = new Date(a.dateFirstSeen as any).getTime();
      const tB = new Date(b.dateFirstSeen as any).getTime();
      return order === 'asc' ? tA - tB : tB - tA;
    }
    default:
      return 0;
  }
};
