import { useMutation, useQueryClient } from '@tanstack/react-query';
import { getAuthenticationTokens } from '../utils/authenticationUtils';
import { MetricTypes } from '../utils/MetricTypes';
import { useConfig } from './getConfig';
import { post } from '../api/client';
import { componentMetricsQueryKeys } from './useComponentMetricsQuery';

type AcceptVulnVariables = {
  componentName: string;
  vulnerabilityId: string;
  comment?: string;
  acceptedBy?: string;
};

export const useAcceptVulnerabilityQuery = (repoName: string) => {
  const queryClient = useQueryClient();
  const { config, backstageAuthApi, microsoftAuthApi, endpointUrl } = useConfig(
    MetricTypes.acceptVulnerability,
  );

  return useMutation<any, unknown, AcceptVulnVariables>({
    mutationFn: async ({
      componentName,
      vulnerabilityId,
      comment,
      acceptedBy,
    }) => {
      const { entraIdToken, backstageToken } = await getAuthenticationTokens(
        config,
        backstageAuthApi,
        microsoftAuthApi,
      );
      return post<
        {
          componentName: string;
          vulnerabilityId: string;
          comment?: string;
          acceptedBy?: string;
          entraIdToken: string;
        },
        any
      >(endpointUrl, backstageToken, {
        componentName,
        vulnerabilityId,
        comment,
        acceptedBy,
        entraIdToken,
      });
    },
    onSettled: () => {
      return queryClient.invalidateQueries({
        queryKey: componentMetricsQueryKeys.metrics(repoName),
      });
    },
  });
};
